// RESPONSIVE BREAKPOINTS
$small: 320px;
$medium: 767px;
$large: 1200px;

$breakpoints: (
  'small': ( max-width: $small ),
  'medium': ( min-width: $medium + 1px ),
  'large': ( min-width: $large )
) !default;

@mixin respond-to($breakpoint) {
  //if key exists in map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints media query based on value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
  @else {
    @warn "breakpoint value cannot be found from '#{$breakpoint}'. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// SASS FUNCTIONS
@function set-text-color($color) {
  @if (lightness($color) > 50) {
    @return $color__font; // Lighter backgorund, return dark color
  } @else {
    @return $color__font--light; // Darker background, return light color
  }
}

// FONT CONVERTER
// font-size: convert(16, pts, ems);
@function convert($value, $currentUnit, $convertUnit){
   @if $currentUnit == px{

      @if $convertUnit == ems{
        @return $value / 16 + 0em;
      }
      @else if $convertUnit == percent{
        @return percentage($value / 16);
      }

   }@else if $currentUnit == ems{

      @if $convertUnit == px{
        @return $value * 16 + 0px;
      }
      @else if $convertUnit == percent{
        @return percentage($value);
      }

   }@else if $currentUnit == percent{

      @if $convertUnit == px{
        @return $value * 16 / 100 + 0px;
      }
      @else if $convertUnit == ems{
        @return $value / 100 + 0em;
      }

   }@else if $currentUnit == pts{

      @if $convertUnit == px {
        @return $value * 1.3333 + 0px;  //0.75
      }
      @else if $convertUnit == ems{
        @return $value / 16 + 0em;
      }
      @else if $convertUnit == percent{
        @return percentage($value / 12)
      }

   }
}
